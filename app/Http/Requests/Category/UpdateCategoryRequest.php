<?php

namespace App\Http\Requests\Category; // Ensure correct namespace

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\Rule;

class UpdateCategoryRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        // Authorization handled by controller middleware.
        // Can add specific logic here too, e.g., user can only update categories of their own store.
        // $category = $this->route('category'); // Get category from route model binding
        // $user = Auth::user();
        // return $user->hasRole('super-admin') || ($user->store_id === $category->store_id && $user->can('update own_store_categories'));
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        $categoryId = $this->route('category')->id; // Get the ID of the category being updated
        $user = Auth::user();
        // Determine the store_id to use for validation context (e.g. for parent_id existence check)
        $storeIdForValidation = $this->route('category')->store_id; // The category's current store_id


        return [
            'name' => [
                'sometimes', // Validate only if present
                'required',
                'string',
                'max:255',
                // Example: Rule::unique('categories')->where(function ($query) use ($storeIdForValidation, $categoryId) {
                //     return $query->where('store_id', $storeIdForValidation)
                //                  ->where('parent_id', $this->input('parent_id', $this->route('category')->parent_id))
                //                  ->where('id', '!=', $categoryId);
                // }),
            ],
            'slug' => [
                'sometimes',
                'nullable', // Slug can be explicitly set to null to be auto-regenerated by model if name changes
                'string',
                'max:255',
                Rule::unique('categories', 'slug')->ignore($categoryId), // Slug must be unique, ignoring current category
            ],
            'description' => 'nullable|string|max:1000',
            'parent_id' => [
                'nullable',
                'integer',
                Rule::exists('categories', 'id')->where(function ($query) use ($storeIdForValidation) {
                    return $query->where('store_id', $storeIdForValidation);
                }),
                Rule::notIn([$categoryId]), // A category cannot be its own parent
            ],
            'image' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048',
            'is_active' => 'sometimes|boolean',
            'sort_order' => 'sometimes|integer|min:0',
            // store_id is generally not updatable for a category, but if it is:
            // 'store_id' => [
            //     Rule::requiredIf(fn () => $user->hasRole('super-admin')), // Only super-admin can change store_id
            //     'integer',
            //     'exists:stores,id'
            // ]
        ];
    }
    public function messages(): array
    {
        return [
            'parent_id.exists' => 'The selected parent category does not exist or does not belong to the same store.',
            'parent_id.not_in' => 'A category cannot be its own parent.',
        ];
    }
}